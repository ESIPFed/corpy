# coding: utf-8

"""
    ORR API Documentation

    The main ORR documentation is located at: https://mmisw.org/orrdoc/  __Please note__: - The ORR API is approaching a stable version but is still work in progress.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page lets you directly exercise and test the API.   Click on any operation header below to learn more details about it, and see a \"Try it out\" button.  - You can click on the \"Authorize\" button at the top right of this page   (or the `!` icon under the particular operation)   to retrieve an authentication token corresponding to your ORR instance credentials (username and password).   Once authorized, the authentication token will be automatically included in the corresponding request.   You will be able to not only perform the basic `GET` operations,   but also see expanded responses according to your access privileges   as well as perform other operations.  - The \"Try it out\" button will also show the corresponding API call that you can submit   from the command line using [`curl`](https://curl.haxx.se/).  - This API includes administrative operations related with the triple store.   The SPARQL endpoint itself   (located at `https://mmisw.org/sparql` for the MMI ORR instance)   is not described here.   (General SPARQL information can be found [here](https://en.wikipedia.org/wiki/SPARQL),   and regarding the current service used by the ORR to support the SPARQL interface   [here](http://franz.com/agraph/support/documentation/current/http-protocol.html).)  - Actual requests from this page are against the specific endpoint at   `https://mmisw.org/ont`.   # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.possible_ontology_info import PossibleOntologyInfo  # noqa: F401,E501


class UploadedFileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'filename': 'str',
        'format': 'str',
        'possible_ontology_iris': 'dict(str, PossibleOntologyInfo)'
    }

    attribute_map = {
        'user_name': 'userName',
        'filename': 'filename',
        'format': 'format',
        'possible_ontology_iris': 'possibleOntologyIris'
    }

    def __init__(self, user_name=None, filename=None, format=None, possible_ontology_iris=None):  # noqa: E501
        """UploadedFileInfo - a model defined in Swagger"""  # noqa: E501

        self._user_name = None
        self._filename = None
        self._format = None
        self._possible_ontology_iris = None
        self.discriminator = None

        if user_name is not None:
            self.user_name = user_name
        if filename is not None:
            self.filename = filename
        if format is not None:
            self.format = format
        if possible_ontology_iris is not None:
            self.possible_ontology_iris = possible_ontology_iris

    @property
    def user_name(self):
        """Gets the user_name of this UploadedFileInfo.  # noqa: E501

        The user that requested the upload.  # noqa: E501

        :return: The user_name of this UploadedFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UploadedFileInfo.

        The user that requested the upload.  # noqa: E501

        :param user_name: The user_name of this UploadedFileInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def filename(self):
        """Gets the filename of this UploadedFileInfo.  # noqa: E501

        The name associated with the file.  # noqa: E501

        :return: The filename of this UploadedFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this UploadedFileInfo.

        The name associated with the file.  # noqa: E501

        :param filename: The filename of this UploadedFileInfo.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def format(self):
        """Gets the format of this UploadedFileInfo.  # noqa: E501

        The format of the file.  # noqa: E501

        :return: The format of this UploadedFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this UploadedFileInfo.

        The format of the file.  # noqa: E501

        :param format: The format of this UploadedFileInfo.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def possible_ontology_iris(self):
        """Gets the possible_ontology_iris of this UploadedFileInfo.  # noqa: E501

        The format of the file.  # noqa: E501

        :return: The possible_ontology_iris of this UploadedFileInfo.  # noqa: E501
        :rtype: dict(str, PossibleOntologyInfo)
        """
        return self._possible_ontology_iris

    @possible_ontology_iris.setter
    def possible_ontology_iris(self, possible_ontology_iris):
        """Sets the possible_ontology_iris of this UploadedFileInfo.

        The format of the file.  # noqa: E501

        :param possible_ontology_iris: The possible_ontology_iris of this UploadedFileInfo.  # noqa: E501
        :type: dict(str, PossibleOntologyInfo)
        """

        self._possible_ontology_iris = possible_ontology_iris

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadedFileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadedFileInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
