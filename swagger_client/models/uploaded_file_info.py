# coding: utf-8

"""
    ORR Ont API Documentation

    The main ORR documentation is located at: http://mmisw.org/orrdoc/ ``` ###################################################### # NOTE #   OUT-OF-DATE for the time being. # Currently the swagger spec is maintained in the # https://github.com/mmisw/mmiorr-docs repo, which # is served at http://mmisw.org/orrdoc/api/ ###################################################### ``` __Note__: - We are in the process of writing this API documentation.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page also allows to directly exercise the API. - Actual requests from this page are against the endpoint at   `http://cor.esipfed.org/sparql`. This may change in a future version in   particular regarding a more general way of exercising the API (regardless   of concrete endpoint), or by allowing the selection of the particular endpoint.  - You can use the \"Authorize\" button above and enter your COR credentials to login   in this API interface. In this way you will be able to perform not only the basic   `GET` operations, but see expanded responses according to your access priviliges   and ontology visibility settings, as well as perform other operations as listed below.   # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.possible_ontology_info import PossibleOntologyInfo  # noqa: F401,E501


class UploadedFileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'filename': 'str',
        'format': 'str',
        'possible_ontology_uris': 'dict(str, PossibleOntologyInfo)'
    }

    attribute_map = {
        'user_name': 'userName',
        'filename': 'filename',
        'format': 'format',
        'possible_ontology_uris': 'possibleOntologyUris'
    }

    def __init__(self, user_name=None, filename=None, format=None, possible_ontology_uris=None):  # noqa: E501
        """UploadedFileInfo - a model defined in Swagger"""  # noqa: E501

        self._user_name = None
        self._filename = None
        self._format = None
        self._possible_ontology_uris = None
        self.discriminator = None

        if user_name is not None:
            self.user_name = user_name
        if filename is not None:
            self.filename = filename
        if format is not None:
            self.format = format
        if possible_ontology_uris is not None:
            self.possible_ontology_uris = possible_ontology_uris

    @property
    def user_name(self):
        """Gets the user_name of this UploadedFileInfo.  # noqa: E501

        The user that requested the upload.  # noqa: E501

        :return: The user_name of this UploadedFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UploadedFileInfo.

        The user that requested the upload.  # noqa: E501

        :param user_name: The user_name of this UploadedFileInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def filename(self):
        """Gets the filename of this UploadedFileInfo.  # noqa: E501

        The name associated with the file.  # noqa: E501

        :return: The filename of this UploadedFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this UploadedFileInfo.

        The name associated with the file.  # noqa: E501

        :param filename: The filename of this UploadedFileInfo.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def format(self):
        """Gets the format of this UploadedFileInfo.  # noqa: E501

        The format of the file.  # noqa: E501

        :return: The format of this UploadedFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this UploadedFileInfo.

        The format of the file.  # noqa: E501

        :param format: The format of this UploadedFileInfo.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def possible_ontology_uris(self):
        """Gets the possible_ontology_uris of this UploadedFileInfo.  # noqa: E501

        The format of the file.  # noqa: E501

        :return: The possible_ontology_uris of this UploadedFileInfo.  # noqa: E501
        :rtype: dict(str, PossibleOntologyInfo)
        """
        return self._possible_ontology_uris

    @possible_ontology_uris.setter
    def possible_ontology_uris(self, possible_ontology_uris):
        """Sets the possible_ontology_uris of this UploadedFileInfo.

        The format of the file.  # noqa: E501

        :param possible_ontology_uris: The possible_ontology_uris of this UploadedFileInfo.  # noqa: E501
        :type: dict(str, PossibleOntologyInfo)
        """

        self._possible_ontology_uris = possible_ontology_uris

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadedFileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadedFileInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
