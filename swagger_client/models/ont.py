# coding: utf-8

"""
    ORR API Documentation

    The main ORR documentation is located at: https://mmisw.org/orrdoc/  __Please note__: - The ORR API is approaching a stable version but is still work in progress.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page lets you directly exercise and test the API.   Click on any operation header below to learn more details about it, and see a \"Try it out\" button.  - You can click on the \"Authorize\" button at the top right of this page   (or the `!` icon under the particular operation)   to retrieve an authentication token corresponding to your ORR instance credentials (username and password).   Once authorized, the authentication token will be automatically included in the corresponding request.   You will be able to not only perform the basic `GET` operations,   but also see expanded responses according to your access privileges   as well as perform other operations.  - The \"Try it out\" button will also show the corresponding API call that you can submit   from the command line using [`curl`](https://curl.haxx.se/).  - This API includes administrative operations related with the triple store.   The SPARQL endpoint itself   (located at `http://cor.esipfed.org/sparql` for the MMI ORR instance)   is not described here.   (General SPARQL information can be found [here](https://en.wikipedia.org/wiki/SPARQL),   and regarding the current service used by the ORR to support the SPARQL interface   [here](http://franz.com/agraph/support/documentation/current/http-protocol.html).)  - Actual requests from this page are against the specific endpoint at   `http://cor.esipfed.org/ont`. 

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ont(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iri': 'str',
        'name': 'str',
        'version': 'str',
        'owner_name': 'str',
        'status': 'str',
        'format': 'str',
        'visibility': 'str'
    }

    attribute_map = {
        'iri': 'iri',
        'name': 'name',
        'version': 'version',
        'owner_name': 'ownerName',
        'status': 'status',
        'format': 'format',
        'visibility': 'visibility'
    }

    def __init__(self, iri=None, name=None, version=None, owner_name=None, status=None, format=None, visibility=None):
        """
        Ont - a model defined in Swagger
        """

        self._iri = None
        self._name = None
        self._version = None
        self._owner_name = None
        self._status = None
        self._format = None
        self._visibility = None

        if iri is not None:
          self.iri = iri
        if name is not None:
          self.name = name
        if version is not None:
          self.version = version
        if owner_name is not None:
          self.owner_name = owner_name
        if status is not None:
          self.status = status
        if format is not None:
          self.format = format
        if visibility is not None:
          self.visibility = visibility

    @property
    def iri(self):
        """
        Gets the iri of this Ont.

        :return: The iri of this Ont.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri):
        """
        Sets the iri of this Ont.

        :param iri: The iri of this Ont.
        :type: str
        """

        self._iri = iri

    @property
    def name(self):
        """
        Gets the name of this Ont.

        :return: The name of this Ont.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Ont.

        :param name: The name of this Ont.
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """
        Gets the version of this Ont.

        :return: The version of this Ont.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Ont.

        :param version: The version of this Ont.
        :type: str
        """

        self._version = version

    @property
    def owner_name(self):
        """
        Gets the owner_name of this Ont.

        :return: The owner_name of this Ont.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """
        Sets the owner_name of this Ont.

        :param owner_name: The owner_name of this Ont.
        :type: str
        """

        self._owner_name = owner_name

    @property
    def status(self):
        """
        Gets the status of this Ont.

        :return: The status of this Ont.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Ont.

        :param status: The status of this Ont.
        :type: str
        """

        self._status = status

    @property
    def format(self):
        """
        Gets the format of this Ont.

        :return: The format of this Ont.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this Ont.

        :param format: The format of this Ont.
        :type: str
        """

        self._format = format

    @property
    def visibility(self):
        """
        Gets the visibility of this Ont.

        :return: The visibility of this Ont.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this Ont.

        :param visibility: The visibility of this Ont.
        :type: str
        """

        self._visibility = visibility

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ont):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
