# coding: utf-8

"""
    ORR Ont API Documentation

    The main ORR documentation is located at: http://mmisw.org/orrdoc/ ``` ###################################################### # NOTE #   OUT-OF-DATE for the time being. # Currently the swagger spec is maintained in the # https://github.com/mmisw/mmiorr-docs repo, which # is served at http://mmisw.org/orrdoc/api/ ###################################################### ``` __Note__: - We are in the process of writing this API documentation.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page also allows to directly exercise the API. - Actual requests from this page are against the endpoint at   `http://cor.esipfed.org/sparql`. This may change in a future version in   particular regarding a more general way of exercising the API (regardless   of concrete endpoint), or by allowing the selection of the particular endpoint.  - You can use the \"Authorize\" button above and enter your COR credentials to login   in this API interface. In this way you will be able to perform not only the basic   `GET` operations, but see expanded responses according to your access priviliges   and ontology visibility settings, as well as perform other operations as listed below.   # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Ont(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'name': 'str',
        'version': 'str',
        'owner_name': 'str',
        'status': 'str',
        'format': 'str',
        'visibility': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'name': 'name',
        'version': 'version',
        'owner_name': 'ownerName',
        'status': 'status',
        'format': 'format',
        'visibility': 'visibility'
    }

    def __init__(self, uri=None, name=None, version=None, owner_name=None, status=None, format=None, visibility=None):  # noqa: E501
        """Ont - a model defined in Swagger"""  # noqa: E501

        self._uri = None
        self._name = None
        self._version = None
        self._owner_name = None
        self._status = None
        self._format = None
        self._visibility = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if owner_name is not None:
            self.owner_name = owner_name
        if status is not None:
            self.status = status
        if format is not None:
            self.format = format
        if visibility is not None:
            self.visibility = visibility

    @property
    def uri(self):
        """Gets the uri of this Ont.  # noqa: E501


        :return: The uri of this Ont.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Ont.


        :param uri: The uri of this Ont.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this Ont.  # noqa: E501


        :return: The name of this Ont.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ont.


        :param name: The name of this Ont.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this Ont.  # noqa: E501


        :return: The version of this Ont.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Ont.


        :param version: The version of this Ont.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def owner_name(self):
        """Gets the owner_name of this Ont.  # noqa: E501


        :return: The owner_name of this Ont.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Ont.


        :param owner_name: The owner_name of this Ont.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def status(self):
        """Gets the status of this Ont.  # noqa: E501


        :return: The status of this Ont.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Ont.


        :param status: The status of this Ont.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def format(self):
        """Gets the format of this Ont.  # noqa: E501


        :return: The format of this Ont.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Ont.


        :param format: The format of this Ont.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def visibility(self):
        """Gets the visibility of this Ont.  # noqa: E501


        :return: The visibility of this Ont.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Ont.


        :param visibility: The visibility of this Ont.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ont, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ont):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
