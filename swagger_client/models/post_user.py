# coding: utf-8

"""
    ORR API Documentation

    The main ORR documentation is located at: https://mmisw.org/orrdoc/  __Please note__: - The ORR API is approaching a stable version but is still work in progress.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page lets you directly exercise and test the API.   Click on any operation header below to learn more details about it, and see a \"Try it out\" button.  - You can click on the \"Authorize\" button at the top right of this page   (or the `!` icon under the particular operation)   to retrieve an authentication token corresponding to your ORR instance credentials (username and password).   Once authorized, the authentication token will be automatically included in the corresponding request.   You will be able to not only perform the basic `GET` operations,   but also see expanded responses according to your access privileges   as well as perform other operations.  - The \"Try it out\" button will also show the corresponding API call that you can submit   from the command line using [`curl`](https://curl.haxx.se/).  - This API includes administrative operations related with the triple store.   The SPARQL endpoint itself   (located at `http://cor.esipfed.org/sparql` for the MMI ORR instance)   is not described here.   (General SPARQL information can be found [here](https://en.wikipedia.org/wiki/SPARQL),   and regarding the current service used by the ORR to support the SPARQL interface   [here](http://franz.com/agraph/support/documentation/current/http-protocol.html).)  - Actual requests from this page are against the specific endpoint at   `http://cor.esipfed.org/ont`. 

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PostUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'password': 'str',
        'phone': 'str',
        'recaptcha_response': 'str'
    }

    attribute_map = {
        'user_name': 'userName',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'password': 'password',
        'phone': 'phone',
        'recaptcha_response': 'recaptchaResponse'
    }

    def __init__(self, user_name=None, email=None, first_name=None, last_name=None, password=None, phone=None, recaptcha_response=None):
        """
        PostUser - a model defined in Swagger
        """

        self._user_name = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._password = None
        self._phone = None
        self._recaptcha_response = None

        if user_name is not None:
          self.user_name = user_name
        if email is not None:
          self.email = email
        if first_name is not None:
          self.first_name = first_name
        if last_name is not None:
          self.last_name = last_name
        if password is not None:
          self.password = password
        if phone is not None:
          self.phone = phone
        if recaptcha_response is not None:
          self.recaptcha_response = recaptcha_response

    @property
    def user_name(self):
        """
        Gets the user_name of this PostUser.

        :return: The user_name of this PostUser.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this PostUser.

        :param user_name: The user_name of this PostUser.
        :type: str
        """

        self._user_name = user_name

    @property
    def email(self):
        """
        Gets the email of this PostUser.

        :return: The email of this PostUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this PostUser.

        :param email: The email of this PostUser.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this PostUser.

        :return: The first_name of this PostUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this PostUser.

        :param first_name: The first_name of this PostUser.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this PostUser.

        :return: The last_name of this PostUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this PostUser.

        :param last_name: The last_name of this PostUser.
        :type: str
        """

        self._last_name = last_name

    @property
    def password(self):
        """
        Gets the password of this PostUser.

        :return: The password of this PostUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this PostUser.

        :param password: The password of this PostUser.
        :type: str
        """

        self._password = password

    @property
    def phone(self):
        """
        Gets the phone of this PostUser.

        :return: The phone of this PostUser.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this PostUser.

        :param phone: The phone of this PostUser.
        :type: str
        """

        self._phone = phone

    @property
    def recaptcha_response(self):
        """
        Gets the recaptcha_response of this PostUser.
        Response provided by a [ReCAPCTHA](https://www.google.com/recaptcha) client library. Only required if the ORR Ont endpoint has been configured to validate the registration of users in this manner. 

        :return: The recaptcha_response of this PostUser.
        :rtype: str
        """
        return self._recaptcha_response

    @recaptcha_response.setter
    def recaptcha_response(self, recaptcha_response):
        """
        Sets the recaptcha_response of this PostUser.
        Response provided by a [ReCAPCTHA](https://www.google.com/recaptcha) client library. Only required if the ORR Ont endpoint has been configured to validate the registration of users in this manner. 

        :param recaptcha_response: The recaptcha_response of this PostUser.
        :type: str
        """

        self._recaptcha_response = recaptcha_response

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PostUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
