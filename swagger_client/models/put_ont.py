# coding: utf-8

"""
    ORR API Documentation

    The main ORR documentation is located at: https://mmisw.org/orrdoc/  __Please note__: - The ORR API is approaching a stable version but is still work in progress.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page lets you directly exercise and test the API.   Click on any operation header below to learn more details about it, and see a \"Try it out\" button.  - You can click on the \"Authorize\" button at the top right of this page   (or the `!` icon under the particular operation)   to retrieve an authentication token corresponding to your ORR instance credentials (username and password).   Once authorized, the authentication token will be automatically included in the corresponding request.   You will be able to not only perform the basic `GET` operations,   but also see expanded responses according to your access privileges   as well as perform other operations.  - The \"Try it out\" button will also show the corresponding API call that you can submit   from the command line using [`curl`](https://curl.haxx.se/).  - This API includes administrative operations related with the triple store.   The SPARQL endpoint itself   (located at `https://mmisw.org/sparql` for the MMI ORR instance)   is not described here.   (General SPARQL information can be found [here](https://en.wikipedia.org/wiki/SPARQL),   and regarding the current service used by the ORR to support the SPARQL interface   [here](http://franz.com/agraph/support/documentation/current/http-protocol.html).)  - Actual requests from this page are against the specific endpoint at   `https://mmisw.org/ont`. 

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PutOnt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iri': 'str',
        'version': 'str',
        'original_iri': 'str',
        'name': 'str',
        'visibility': 'str',
        'status': 'str',
        'metadata': 'str',
        'uploaded_filename': 'str',
        'uploaded_format': 'str',
        'contents': 'str',
        'format': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'iri': 'iri',
        'version': 'version',
        'original_iri': 'originalIri',
        'name': 'name',
        'visibility': 'visibility',
        'status': 'status',
        'metadata': 'metadata',
        'uploaded_filename': 'uploadedFilename',
        'uploaded_format': 'uploadedFormat',
        'contents': 'contents',
        'format': 'format',
        'user_name': 'userName'
    }

    def __init__(self, iri=None, version=None, original_iri=None, name=None, visibility=None, status=None, metadata=None, uploaded_filename=None, uploaded_format=None, contents=None, format=None, user_name=None):
        """
        PutOnt - a model defined in Swagger
        """

        self._iri = None
        self._version = None
        self._original_iri = None
        self._name = None
        self._visibility = None
        self._status = None
        self._metadata = None
        self._uploaded_filename = None
        self._uploaded_format = None
        self._contents = None
        self._format = None
        self._user_name = None

        if iri is not None:
          self.iri = iri
        if version is not None:
          self.version = version
        if original_iri is not None:
          self.original_iri = original_iri
        if name is not None:
          self.name = name
        if visibility is not None:
          self.visibility = visibility
        if status is not None:
          self.status = status
        if metadata is not None:
          self.metadata = metadata
        if uploaded_filename is not None:
          self.uploaded_filename = uploaded_filename
        if uploaded_format is not None:
          self.uploaded_format = uploaded_format
        if contents is not None:
          self.contents = contents
        if format is not None:
          self.format = format
        if user_name is not None:
          self.user_name = user_name

    @property
    def iri(self):
        """
        Gets the iri of this PutOnt.
        The IRI of the ontology to be updated.

        :return: The iri of this PutOnt.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri):
        """
        Sets the iri of this PutOnt.
        The IRI of the ontology to be updated.

        :param iri: The iri of this PutOnt.
        :type: str
        """

        self._iri = iri

    @property
    def version(self):
        """
        Gets the version of this PutOnt.
        If given, this particular version will be updated. Otherwise, a new version (which is generated by the ORR) is created. 

        :return: The version of this PutOnt.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this PutOnt.
        If given, this particular version will be updated. Otherwise, a new version (which is generated by the ORR) is created. 

        :param version: The version of this PutOnt.
        :type: str
        """

        self._version = version

    @property
    def original_iri(self):
        """
        Gets the original_iri of this PutOnt.
        In case a fully-hosted registration and ontology contents are provided for this update, enter this field to indicate the original IRI to be used for the \"migration\" of corresponding entities to the IRI used for registration. 

        :return: The original_iri of this PutOnt.
        :rtype: str
        """
        return self._original_iri

    @original_iri.setter
    def original_iri(self, original_iri):
        """
        Sets the original_iri of this PutOnt.
        In case a fully-hosted registration and ontology contents are provided for this update, enter this field to indicate the original IRI to be used for the \"migration\" of corresponding entities to the IRI used for registration. 

        :param original_iri: The original_iri of this PutOnt.
        :type: str
        """

        self._original_iri = original_iri

    @property
    def name(self):
        """
        Gets the name of this PutOnt.
        If given, this will be the new name for the ontology. 

        :return: The name of this PutOnt.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PutOnt.
        If given, this will be the new name for the ontology. 

        :param name: The name of this PutOnt.
        :type: str
        """

        self._name = name

    @property
    def visibility(self):
        """
        Gets the visibility of this PutOnt.
        One of: `owner` or `public`. 

        :return: The visibility of this PutOnt.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this PutOnt.
        One of: `owner` or `public`. 

        :param visibility: The visibility of this PutOnt.
        :type: str
        """

        self._visibility = visibility

    @property
    def status(self):
        """
        Gets the status of this PutOnt.
        One of: `draft`, `unstable`, `testing`, `stable`,  `deprecated`, `archaic`. 

        :return: The status of this PutOnt.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PutOnt.
        One of: `draft`, `unstable`, `testing`, `stable`,  `deprecated`, `archaic`. 

        :param status: The status of this PutOnt.
        :type: str
        """

        self._status = status

    @property
    def metadata(self):
        """
        Gets the metadata of this PutOnt.
        Ontology metadata as a JSON formatted object. This parameter allows to perform the update solely based on changes to the metadata. 

        :return: The metadata of this PutOnt.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this PutOnt.
        Ontology metadata as a JSON formatted object. This parameter allows to perform the update solely based on changes to the metadata. 

        :param metadata: The metadata of this PutOnt.
        :type: str
        """

        self._metadata = metadata

    @property
    def uploaded_filename(self):
        """
        Gets the uploaded_filename of this PutOnt.
        Name of file previously uploaded via prior `POST /ont/upload` request. 

        :return: The uploaded_filename of this PutOnt.
        :rtype: str
        """
        return self._uploaded_filename

    @uploaded_filename.setter
    def uploaded_filename(self, uploaded_filename):
        """
        Sets the uploaded_filename of this PutOnt.
        Name of file previously uploaded via prior `POST /ont/upload` request. 

        :param uploaded_filename: The uploaded_filename of this PutOnt.
        :type: str
        """

        self._uploaded_filename = uploaded_filename

    @property
    def uploaded_format(self):
        """
        Gets the uploaded_format of this PutOnt.
        Format of the file previously uploaded via prior `POST /ont/upload` request. 

        :return: The uploaded_format of this PutOnt.
        :rtype: str
        """
        return self._uploaded_format

    @uploaded_format.setter
    def uploaded_format(self, uploaded_format):
        """
        Sets the uploaded_format of this PutOnt.
        Format of the file previously uploaded via prior `POST /ont/upload` request. 

        :param uploaded_format: The uploaded_format of this PutOnt.
        :type: str
        """

        self._uploaded_format = uploaded_format

    @property
    def contents(self):
        """
        Gets the contents of this PutOnt.
        Direct contents of the ontology. 

        :return: The contents of this PutOnt.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """
        Sets the contents of this PutOnt.
        Direct contents of the ontology. 

        :param contents: The contents of this PutOnt.
        :type: str
        """

        self._contents = contents

    @property
    def format(self):
        """
        Gets the format of this PutOnt.
        Format of the `contents`. 

        :return: The format of this PutOnt.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this PutOnt.
        Format of the `contents`. 

        :param format: The format of this PutOnt.
        :type: str
        """

        self._format = format

    @property
    def user_name(self):
        """
        Gets the user_name of this PutOnt.
        Registered user making the request. 

        :return: The user_name of this PutOnt.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this PutOnt.
        Registered user making the request. 

        :param user_name: The user_name of this PutOnt.
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PutOnt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
