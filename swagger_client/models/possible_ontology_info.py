# coding: utf-8

"""
    ORR Ont API Documentation

    The main ORR documentation is located at: http://mmisw.org/orrdoc/ ``` ###################################################### # NOTE #   OUT-OF-DATE for the time being. # Currently the swagger spec is maintained in the # https://github.com/mmisw/mmiorr-docs repo, which # is served at http://mmisw.org/orrdoc/api/ ###################################################### ``` __Note__: - We are in the process of writing this API documentation.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page also allows to directly exercise the API. - Actual requests from this page are against the endpoint at   `http://cor.esipfed.org/sparql`. This may change in a future version in   particular regarding a more general way of exercising the API (regardless   of concrete endpoint), or by allowing the selection of the particular endpoint.  - You can use the \"Authorize\" button above and enter your COR credentials to login   in this API interface. In this way you will be able to perform not only the basic   `GET` operations, but see expanded responses according to your access priviliges   and ontology visibility settings, as well as perform other operations as listed below.   # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PossibleOntologyInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'explanations': 'list[str]',
        'metadata': 'dict(str, list[str])'
    }

    attribute_map = {
        'explanations': 'explanations',
        'metadata': 'metadata'
    }

    def __init__(self, explanations=None, metadata=None):  # noqa: E501
        """PossibleOntologyInfo - a model defined in Swagger"""  # noqa: E501

        self._explanations = None
        self._metadata = None
        self.discriminator = None

        if explanations is not None:
            self.explanations = explanations
        if metadata is not None:
            self.metadata = metadata

    @property
    def explanations(self):
        """Gets the explanations of this PossibleOntologyInfo.  # noqa: E501

        Explanations for the extraction of the given possible ontology URI.   # noqa: E501

        :return: The explanations of this PossibleOntologyInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._explanations

    @explanations.setter
    def explanations(self, explanations):
        """Sets the explanations of this PossibleOntologyInfo.

        Explanations for the extraction of the given possible ontology URI.   # noqa: E501

        :param explanations: The explanations of this PossibleOntologyInfo.  # noqa: E501
        :type: list[str]
        """

        self._explanations = explanations

    @property
    def metadata(self):
        """Gets the metadata of this PossibleOntologyInfo.  # noqa: E501

        Metadata associated to the ontology URI.  # noqa: E501

        :return: The metadata of this PossibleOntologyInfo.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PossibleOntologyInfo.

        Metadata associated to the ontology URI.  # noqa: E501

        :param metadata: The metadata of this PossibleOntologyInfo.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PossibleOntologyInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PossibleOntologyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
