# coding: utf-8

"""
    ORR API Documentation

    The main ORR documentation is located at: https://mmisw.org/orrdoc/  __Please note__: - The ORR API is approaching a stable version but is still work in progress.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page lets you directly exercise and test the API.   Click on any operation header below to learn more details about it, and see a \"Try it out\" button.  - You can click on the \"Authorize\" button at the top right of this page   (or the `!` icon under the particular operation)   to retrieve an authentication token corresponding to your ORR instance credentials (username and password).   Once authorized, the authentication token will be automatically included in the corresponding request.   You will be able to not only perform the basic `GET` operations,   but also see expanded responses according to your access privileges   as well as perform other operations.  - The \"Try it out\" button will also show the corresponding API call that you can submit   from the command line using [`curl`](https://curl.haxx.se/).  - This API includes administrative operations related with the triple store.   The SPARQL endpoint itself   (located at `https://mmisw.org/sparql` for the MMI ORR instance)   is not described here.   (General SPARQL information can be found [here](https://en.wikipedia.org/wiki/SPARQL),   and regarding the current service used by the ORR to support the SPARQL interface   [here](http://franz.com/agraph/support/documentation/current/http-protocol.html).)  - Actual requests from this page are against the specific endpoint at   `https://mmisw.org/ont`. 

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PossibleOntologyInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'explanations': 'list[str]',
        'metadata': 'dict(str, list[str])'
    }

    attribute_map = {
        'explanations': 'explanations',
        'metadata': 'metadata'
    }

    def __init__(self, explanations=None, metadata=None):
        """
        PossibleOntologyInfo - a model defined in Swagger
        """

        self._explanations = None
        self._metadata = None

        if explanations is not None:
          self.explanations = explanations
        if metadata is not None:
          self.metadata = metadata

    @property
    def explanations(self):
        """
        Gets the explanations of this PossibleOntologyInfo.
        Explanations for the extraction of the given possible ontology IRI. 

        :return: The explanations of this PossibleOntologyInfo.
        :rtype: list[str]
        """
        return self._explanations

    @explanations.setter
    def explanations(self, explanations):
        """
        Sets the explanations of this PossibleOntologyInfo.
        Explanations for the extraction of the given possible ontology IRI. 

        :param explanations: The explanations of this PossibleOntologyInfo.
        :type: list[str]
        """

        self._explanations = explanations

    @property
    def metadata(self):
        """
        Gets the metadata of this PossibleOntologyInfo.
        Metadata associated to the ontology IRI.

        :return: The metadata of this PossibleOntologyInfo.
        :rtype: dict(str, list[str])
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this PossibleOntologyInfo.
        Metadata associated to the ontology IRI.

        :param metadata: The metadata of this PossibleOntologyInfo.
        :type: dict(str, list[str])
        """

        self._metadata = metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PossibleOntologyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
