# coding: utf-8

"""
    ORR API Documentation

    The main ORR documentation is located at: https://mmisw.org/orrdoc/  __Please note__: - The ORR API is approaching a stable version but is still work in progress.   Please [let us know](https://github.com/mmisw/mmiorr-docs/issues) if you have any   questions or suggestions.  - Besides the documentation itself, this page lets you directly exercise and test the API.   Click on any operation header below to learn more details about it, and see a \"Try it out\" button.  - You can click on the \"Authorize\" button at the top right of this page   (or the `!` icon under the particular operation)   to retrieve an authentication token corresponding to your ORR instance credentials (username and password).   Once authorized, the authentication token will be automatically included in the corresponding request.   You will be able to not only perform the basic `GET` operations,   but also see expanded responses according to your access privileges   as well as perform other operations.  - The \"Try it out\" button will also show the corresponding API call that you can submit   from the command line using [`curl`](https://curl.haxx.se/).  - This API includes administrative operations related with the triple store.   The SPARQL endpoint itself   (located at `http://cor.esipfed.org/sparql` for the MMI ORR instance)   is not described here.   (General SPARQL information can be found [here](https://en.wikipedia.org/wiki/SPARQL),   and regarding the current service used by the ORR to support the SPARQL interface   [here](http://franz.com/agraph/support/documentation/current/http-protocol.html).)  - Actual requests from this page are against the specific endpoint at   `http://cor.esipfed.org/ont`. 

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TermApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_term(self, body, **kwargs):
        """
        Adds a term to an existing ORR vocabulary
        This operation allows to add a new term to an ORR vocabulary. This addition does not generate a new version of the vocabulary. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_term(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostTerm body: Object with information for the term to be added. See the `PostOnt` object description for more details.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_term_with_http_info(body, **kwargs)
        else:
            (data) = self.add_term_with_http_info(body, **kwargs)
            return data

    def add_term_with_http_info(self, body, **kwargs):
        """
        Adds a term to an existing ORR vocabulary
        This operation allows to add a new term to an ORR vocabulary. This addition does not generate a new version of the vocabulary. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_term_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostTerm body: Object with information for the term to be added. See the `PostOnt` object description for more details.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_term`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'multipart/form-data'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/ont/term', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def term_get(self, **kwargs):
        """
        Simplified semantic search queries against the triple store
        This endpoint route is intended to provide some common semantic search operations against the triple store.  **NOTE**: This is an experimental operation. The SPARQL interface remains the most complete and powerful semantic search mechanism.  Provide one of `containing` or `predicate` as main parameter, along with associated auxiliary and optional parameters as described. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.term_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str containing: Searches the given string in the indicated parts of the triples as determined by the `in` parameter. 
        :param str _in: Only used in combination with the `containing` parameter, the `in` parameter determines where to perform the search: subject, predicate, and/or object. Use the 1-character abbreviations: `s` for subject, `p` for predicate, `o` for object. Any combination of these characters can be used as value for the `in` parameter. For example, to search the given `containing` string in all parts of the triple use `spo`. The default value is `s`, meaning the search will only be on the subject. 
        :param str predicate: Desired predicate to retrieve entities related with a given subject or object. The following common namespace prefixes are recognized: `skos:`, `owl:`, `rdfs:`, `rdf:`. So possible values of this parameter include `skos:relatedMatch` and `owl:sameAs`. If the value does not start with any of the recognized prefixes, then it is assumed to be a full IRI, e.g., `http://purl.org/dc/terms/description`.  This parameter is to be used in combination with one of the `subject` or `object` parameters. If `subject` is given, the underlying SPARQL query is basically `<subject> <predicate> ?object` and the resulting list of objects is returned. Otherwise the underlying SPARQL query is basically `?subject <predicate> <object>` and the resulting list of subjects is returned. 
        :param str subject: IRI of the subject for underlying SPARQL query. Required when any of the _predicate_ parameters is given and **no** object parameter is given. 
        :param str object: IRI of the object for underlying SPARQL query. Required when any of the _predicate_ parameters is given and **no** subject parameter is given. 
        :param int limit: Maximum number of solutions to be returned. The default value is 30. A non-positive value means no limit, so all solutions will be returned. 
        :param int offset: Solutions returned will start after the specified number of solutions. Ignored if the value is non-positive. By default, no offset. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.term_get_with_http_info(**kwargs)
        else:
            (data) = self.term_get_with_http_info(**kwargs)
            return data

    def term_get_with_http_info(self, **kwargs):
        """
        Simplified semantic search queries against the triple store
        This endpoint route is intended to provide some common semantic search operations against the triple store.  **NOTE**: This is an experimental operation. The SPARQL interface remains the most complete and powerful semantic search mechanism.  Provide one of `containing` or `predicate` as main parameter, along with associated auxiliary and optional parameters as described. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.term_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str containing: Searches the given string in the indicated parts of the triples as determined by the `in` parameter. 
        :param str _in: Only used in combination with the `containing` parameter, the `in` parameter determines where to perform the search: subject, predicate, and/or object. Use the 1-character abbreviations: `s` for subject, `p` for predicate, `o` for object. Any combination of these characters can be used as value for the `in` parameter. For example, to search the given `containing` string in all parts of the triple use `spo`. The default value is `s`, meaning the search will only be on the subject. 
        :param str predicate: Desired predicate to retrieve entities related with a given subject or object. The following common namespace prefixes are recognized: `skos:`, `owl:`, `rdfs:`, `rdf:`. So possible values of this parameter include `skos:relatedMatch` and `owl:sameAs`. If the value does not start with any of the recognized prefixes, then it is assumed to be a full IRI, e.g., `http://purl.org/dc/terms/description`.  This parameter is to be used in combination with one of the `subject` or `object` parameters. If `subject` is given, the underlying SPARQL query is basically `<subject> <predicate> ?object` and the resulting list of objects is returned. Otherwise the underlying SPARQL query is basically `?subject <predicate> <object>` and the resulting list of subjects is returned. 
        :param str subject: IRI of the subject for underlying SPARQL query. Required when any of the _predicate_ parameters is given and **no** object parameter is given. 
        :param str object: IRI of the object for underlying SPARQL query. Required when any of the _predicate_ parameters is given and **no** subject parameter is given. 
        :param int limit: Maximum number of solutions to be returned. The default value is 30. A non-positive value means no limit, so all solutions will be returned. 
        :param int offset: Solutions returned will start after the specified number of solutions. Ignored if the value is non-positive. By default, no offset. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['containing', '_in', 'predicate', 'subject', 'object', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method term_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'containing' in params:
            query_params.append(('containing', params['containing']))
        if '_in' in params:
            query_params.append(('in', params['_in']))
        if 'predicate' in params:
            query_params.append(('predicate', params['predicate']))
        if 'subject' in params:
            query_params.append(('subject', params['subject']))
        if 'object' in params:
            query_params.append(('object', params['object']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/term', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
